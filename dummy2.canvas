{
  "objectType" : "Graph",
  "metadata" : {
    "camera_mat44" : "{\n  \"row0\" : {\n    \"x\" : -0.9995133280754089,\n    \"y\" : -0.04420386627316475,\n    \"z\" : 0.008044050075113773,\n    \"t\" : 5.979546546936035\n    },\n  \"row1\" : {\n    \"x\" : 1.643713176235906e-06,\n    \"y\" : 0.1789751052856445,\n    \"z\" : 0.9840894937515259,\n    \"t\" : 178.2951812744141\n    },\n  \"row2\" : {\n    \"x\" : -0.04495096951723099,\n    \"y\" : 0.9829075336456299,\n    \"z\" : -0.178828626871109,\n    \"t\" : -32.08006286621094\n    },\n  \"row3\" : {\n    \"x\" : 0,\n    \"y\" : 0,\n    \"z\" : 0,\n    \"t\" : 1\n    }\n  }",
    "timeline_start" : "1",
    "timeline_loopMode" : "1",
    "uiGraphZoom" : "{\n  \"value\" : 0.3937845528125763\n  }",
    "timeline_simMode" : "0",
    "camera_focalDistance" : "176.1891021728516",
    "timeline_current" : "1",
    "timeline_end" : "50",
    "uiGraphPan" : "{\n  \"x\" : 567.2168076334102,\n  \"y\" : 351.8351591728226\n  }"
    },
  "title" : "",
  "ports" : [
    {
      "objectType" : "Port",
      "metadata" : {
        "uiPersistValue" : "true"
        },
      "nodePortType" : "Out",
      "name" : "filePath",
      "execPortType" : "In",
      "typeSpec" : "String"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiPersistValue" : "true"
        },
      "nodePortType" : "Out",
      "name" : "order",
      "execPortType" : "In",
      "typeSpec" : "UInt32"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiPersistValue" : "true"
        },
      "nodePortType" : "Out",
      "name" : "testvalx",
      "execPortType" : "In"
      },
    {
      "objectType" : "Port",
      "metadata" : {
        "uiPersistValue" : "true"
        },
      "nodePortType" : "Out",
      "name" : "testvaly",
      "execPortType" : "In",
      "typeSpec" : "UInt32"
      },
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "In",
      "name" : "value",
      "execPortType" : "Out",
      "typeSpec" : "Float64[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "In",
      "name" : "value_2",
      "execPortType" : "Out",
      "typeSpec" : "Float64[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "In",
      "name" : "value_4",
      "execPortType" : "Out",
      "typeSpec" : "Float64[]"
      },
    {
      "objectType" : "Port",
      "metadata" : {},
      "nodePortType" : "In",
      "name" : "value_5",
      "execPortType" : "Out",
      "typeSpec" : "Boolean"
      }
    ],
  "extDeps" : {},
  "nodes" : [
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":-964.626953125,\"y\":-759.6320190429688}"
        },
      "name" : "LoadImage",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "verbose"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "filePath"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "result"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "pixels"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "width"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "height"
          }
        ],
      "definition" : {
        "objectType" : "Graph",
        "metadata" : {
          "uiNodeColor" : "{\n  \"r\" : 144,\n  \"g\" : 130,\n  \"b\" : 120\n  }",
          "uiGraphZoom" : "{\n  \"value\" : 0.8138958215713501\n  }",
          "uiHeaderColor" : "{\n  \"r\" : 115,\n  \"g\" : 105,\n  \"b\" : 75\n  }",
          "uiTooltip" : "loads an image from disk",
          "uiGraphPan" : "{\n  \"x\" : 21.2629981637001,\n  \"y\" : 9.372200310230255\n  }"
          },
        "title" : "LoadImage",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "verbose",
            "execPortType" : "In",
            "typeSpec" : "Boolean"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "defaultValues" : {
              "String" : "C:\\Temp\\image1.jpg"
              },
            "name" : "filePath",
            "execPortType" : "In",
            "typeSpec" : "String"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "result",
            "execPortType" : "Out",
            "typeSpec" : "Image2DColor"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "pixels",
            "execPortType" : "Out",
            "typeSpec" : "Color[]"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "width",
            "execPortType" : "Out",
            "typeSpec" : "Size"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "height",
            "execPortType" : "Out",
            "typeSpec" : "Size"
            }
          ],
        "extDeps" : {
          "OpenImageIO" : "*",
          "FileIO" : "*",
          "Images" : "*"
          },
        "origPresetGUID" : "71A393CF88679424EF2212A78848F258",
        "nodes" : [
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":125.0,\"y\":50.0}"
              },
            "name" : "applyLoadImage",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "verbose"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "filePath"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "success"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "image"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "applyLoadImage",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "verbose",
                  "execPortType" : "In",
                  "typeSpec" : "Boolean"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "filePath",
                  "execPortType" : "In",
                  "typeSpec" : "String"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "success",
                  "execPortType" : "Out",
                  "typeSpec" : "Boolean"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "image",
                  "execPortType" : "Out",
                  "typeSpec" : "Image2DColor"
                  }
                ],
              "extDeps" : {},
              "code" : "require OpenImageIO;\nrequire FileIO;\nrequire Images;\n\ndfgEntry\n{ \n  // init the outputs.\n  success = false;\n  image   = Image2DColor();\n\n  // open the image file.\n  if (verbose)  report(\"opening image file \\\"\" + filePath + \"\\\"\");\n  OpenImageInput file = OpenImageInput();\n  file.open(filePath);\n  if(!file.valid())\n  {\n    if (verbose)  report(\"ERROR: unable to open image file.\");\n    return;\n  }\n  \n  // get the image file's specs, verbose and check image resolution.\n  OpenImageSpec fileSpec = file.spec();\n  if (verbose)\n  {\n    report(\"   width    = \" + fileSpec.get_full_width ());\n    report(\"   height   = \" + fileSpec.get_full_height());\n    report(\"   channels = \" + fileSpec.get_nchannels  ());\n  }\n  if (fileSpec.get_full_width() <= 0 || fileSpec.get_full_height() <= 0)\n  {\n    if (verbose)  report(\"ERROR: bad image resolution.\");\n    return;\n  }\n  \n  // set output image from image file data.\n  OpenImageTypeDesc fileDesc = OpenImageTypeDesc(OpenImage_BASETYPE_FLOAT, OpenImage_AGGREGATE_SCALAR, OpenImage_VECSEMANTICS_NOXFORM);\n  switch (fileSpec.get_nchannels())\n  {\n    case 1:    // gray scale.\n    {\n      image.resize(fileSpec.get_full_width(), fileSpec.get_full_height());\n      Float32 tmp[];\n      tmp.resize(image.width * image.height);\n      Data data = tmp.data();\n      success = file.read_image(fileDesc, data, 0, 0, 0);\n      if (success)\n      {\n        for (UInt32 i=0;i<image.pixels.size();i++)\n        {\n          image.pixels[i].r = tmp[i];\n          image.pixels[i].g = tmp[i];\n          image.pixels[i].b = tmp[i];\n          image.pixels[i].a = 1.0;\n        }\n      }\n      else\n        if (verbose)  report(\"ERROR: read error.\");\n      break;\n    }\n    case 3:    // RGB.\n    {\n      image.resize(fileSpec.get_full_width(), fileSpec.get_full_height());\n      Float32 tmp[];\n      tmp.resize(image.width * image.height * 3);\n      Data data = tmp.data();\n      success = file.read_image(fileDesc, data, 0, 0, 0);\n      if (success)\n      {\n        UInt32 offset = 0;\n        for (UInt32 i=0;i<image.pixels.size();i++)\n        {\n          image.pixels[i].r = tmp[offset++];\n          image.pixels[i].g = tmp[offset++];\n          image.pixels[i].b = tmp[offset++];\n          image.pixels[i].a = 1.0;\n        }\n      }\n      else\n        if (verbose)  report(\"ERROR: read error.\");\n      break;\n    }\n    case 4:    // RGBA.\n    {\n      image.resize(fileSpec.get_full_width(), fileSpec.get_full_height());\n      Data data = image.pixels.data();\n      success = file.read_image(fileDesc, data, 0, 0, 0);\n      if (!success)\n        if (verbose)  report(\"ERROR: read error.\");\n      break;\n    }\n    default:   // unsupported amount of channels.\n    {\n      if (verbose)  report(\"ERROR: unsupported amount of channels.\");\n      break;\n    }\n  }\n  \n  // done.\n  if (success && verbose)\n    report(\"image successfully read.\");\n}\n\n"
              },
            "title" : "applyLoadImage"
            },
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":365.0,\"y\":153.0}"
              },
            "name" : "Cache_2",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "value"
                }
              ],
            "executable" : "Fabric.Core.Data.Cache",
            "presetGUID" : "D903AFD981FE9214C69943F542D5FD60"
            },
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":957.7288818359375,\"y\":208.054931640625}"
              },
            "name" : "imageMetaData",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "image"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "pixels"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "width"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "height"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "imageMetaData",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "image",
                  "execPortType" : "In",
                  "typeSpec" : "Image2D"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "pixels",
                  "execPortType" : "Out",
                  "typeSpec" : "Color[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "width",
                  "execPortType" : "Out",
                  "typeSpec" : "Size"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "height",
                  "execPortType" : "Out",
                  "typeSpec" : "Size"
                  }
                ],
              "extDeps" : {},
              "code" : "dfgEntry {\n  //result = lhs + rhs;\n  pixels = image.pixels;\n  width = image.width;\n  height = image.height;\n}\n"
              }
            }
          ],
        "connections" : {
          "verbose" : [
            "applyLoadImage.verbose"
            ],
          "filePath" : [
            "applyLoadImage.filePath"
            ],
          "applyLoadImage.image" : [
            "Cache_2.value"
            ],
          "Cache_2.value" : [
            "imageMetaData.image"
            ],
          "imageMetaData.image" : [
            "result"
            ],
          "imageMetaData.pixels" : [
            "pixels"
            ],
          "imageMetaData.width" : [
            "width"
            ],
          "imageMetaData.height" : [
            "height"
            ]
          }
        }
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":-241.2017059326172,\"y\":-712.5148315429688}"
        },
      "name" : "FourierSeries_2",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "data"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "order"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "sincoefficients"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "coscoefficients"
          }
        ],
      "definition" : {
        "objectType" : "Func",
        "title" : "FourierSeries",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "data",
            "execPortType" : "In",
            "typeSpec" : "$TYPE$[]"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "order",
            "execPortType" : "In",
            "typeSpec" : "UInt32"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "sincoefficients",
            "execPortType" : "Out",
            "typeSpec" : "Float64[]"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "coscoefficients",
            "execPortType" : "Out",
            "typeSpec" : "Float64[]"
            }
          ],
        "extDeps" : {},
        "code" : "dfgEntry {\n  sincoefficients.resize(0);\n  coscoefficients.resize(0);\n  Float64 doublepi = 6.28318530717958648;\n  Float64 multiplier;\n  for (UInt32 j = 0 ; j < order + 1 ; j++){\n      Float64 sinsum = 0;\n      Float64 cossum = 0;\n      multiplier = 1;\n      if (j==0){\n        multiplier = 0.5;\n      }\n      for (UInt32 i = 0 ; i<data.size() ; i++){\n        sinsum = sinsum + ( 2. / data.size() ) * sin( ( doublepi * j * i )/ data.size() ) * data[i] ;\n        cossum = cossum + ( 2. * multiplier / data.size() ) * cos( ( doublepi * j * i )/ data.size() ) * data[i] ;\n      }\n      sincoefficients.push(sinsum);\n      coscoefficients.push(cossum);\n   }\n}\n"
        }
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":-727.5358276367188,\"y\":-756.100830078125}"
        },
      "name" : "findingedge",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "pixels"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "width"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "height"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "xdata"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "ydata"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "depthdata"
          }
        ],
      "definition" : {
        "objectType" : "Graph",
        "metadata" : {
          "uiGraphZoom" : "{\n  \"value\" : 0.9151291847229004\n  }",
          "uiGraphPan" : "{\n  \"x\" : 496.9402008587422,\n  \"y\" : -291.8171865260229\n  }"
          },
        "title" : "",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "pixels",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "width",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "height",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "xdata",
            "execPortType" : "Out"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "ydata",
            "execPortType" : "Out"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "depthdata",
            "execPortType" : "Out"
            }
          ],
        "extDeps" : {},
        "nodes" : [
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":-326.8580017089844,\"y\":383.3693542480469}"
              },
            "name" : "findfirstpixel",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "xstart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "ystart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "pixels"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "width"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "height"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "findfirstpixel",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "xstart",
                  "execPortType" : "Out",
                  "typeSpec" : "UInt32"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "ystart",
                  "execPortType" : "Out",
                  "typeSpec" : "UInt32"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "pixels",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "width",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "height",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  }
                ],
              "extDeps" : {},
              "code" : "dfgEntry {\n  // This fuction searches for an edge in the picture.\n   // Our height is the number of rows of pixels\n   xstart = 0;\n  for (UInt32 row = 0; row < height; row++)\n  {\n    // For each row, find the maximum pixel R value\n    for (UInt32 column = 0; column < width; column++)\n    {\n      // The pixels are stored in a 1D array, where\n      // the rows are packed together.  We find the \n      // correct pixel by expanding our 2D indices\n      // to a 1D address\n      if (pixels[row * width + column].r > 0)\n      {\n        xstart = row;\n        ystart = column;\n      }\n      if (xstart > 0)\n        break;\n    }\n     if (xstart > 0)\n       break;\n  }\n}"
              }
            },
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":-29.80117797851563,\"y\":399.9150085449219}",
              "uiCollapsedState" : "0"
              },
            "name" : "findingsecondpixel_2",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "xstart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "ystart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "pixels"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "width"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "height"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "xfirst"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "yfirst"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "directionfirst"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "findingsecondpixel",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "xstart",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "ystart",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "pixels",
                  "execPortType" : "In",
                  "typeSpec" : "Color[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "width",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "height",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "xfirst",
                  "execPortType" : "Out",
                  "typeSpec" : "UInt32"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "yfirst",
                  "execPortType" : "Out",
                  "typeSpec" : "UInt32"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "directionfirst",
                  "execPortType" : "Out",
                  "typeSpec" : "UInt8"
                  }
                ],
              "extDeps" : {},
              "code" : "dfgEntry {\n   if (pixels[xstart* width + ystart + 1].r > 0)\n   {\n     directionfirst = 1;\n     xfirst = xstart;\n     yfirst = ystart+1;\n   }\n   else if (pixels[(xstart+1)* width + ystart ].r > 0)\n   {\n     directionfirst = 2;\n     xfirst = xstart+1;\n     yfirst = ystart;\n   }\n   else\n   {\n   report('Isolated pixel');\n   }\n   \n  //result = lhs + rhs;\n}\n"
              }
            },
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiGraphPos" : "{\"x\":322.577392578125,\"y\":352.755859375}"
              },
            "name" : "findingremainingedgepixels",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "xstart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "ystart"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "pixels"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "width"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "height"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "xfirst"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "yfirst"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "directionfirst"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "xdata"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "ydata"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "depthdata"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "findingremainingedgepixels",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "xstart",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "ystart",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "pixels",
                  "execPortType" : "In",
                  "typeSpec" : "Color[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "width",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "height",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "xfirst",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "yfirst",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "directionfirst",
                  "execPortType" : "In",
                  "typeSpec" : "$TYPE$"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "xdata",
                  "execPortType" : "Out",
                  "typeSpec" : "Float64[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "ydata",
                  "execPortType" : "Out",
                  "typeSpec" : "Float64[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "depthdata",
                  "execPortType" : "Out",
                  "typeSpec" : "Float64[]"
                  }
                ],
              "extDeps" : {},
              "code" : "dfgEntry {\n  \n    UInt8 direction = directionfirst;\n    xdata.resize(0);\n    ydata.resize(0);\n    depthdata.resize(0);\n    UInt32 xcurrent = xfirst;\n    UInt32 ycurrent = yfirst;\n    xdata.push(xcurrent);\n    ydata.push(ycurrent);\n    depthdata.push(pixels[ (xcurrent  ) * width + (ycurrent) ].r);\n    \n    while((xcurrent != xstart || ycurrent != ystart)){\n\n      // The first step is to identify where we are coming from. this is stored in direction. \n      // Direction has 4 options 1 moving to the right, 2 moving down, 3 moving to the left, 4 moving up. \n      // All of these directions are global or relative to the picture. These are the targets of the switch statements\n      switch(direction){\n\t\t  case 1:\n\t\t  {//brace opening the case\n\t\t\t  if (pixels[ (xcurrent-1) * width + (ycurrent  ) ].r > 0){\n\t\t\t\t  xcurrent--;\n\t\t\t\t  direction = 4;\n\t\t\t  } else if (pixels[ (xcurrent  ) * width + (ycurrent+1) ].r > 0){\n\t\t\t\t  ycurrent++;\n\t\t\t\t  direction = 1;\n  \t\t\t} else if (pixels[ (xcurrent+1) * width + (ycurrent  ) ].r > 0){\n\t  \t\t\txcurrent++;\n\t\t  \t\tdirection = 2;\n\t\t\t  } else if (pixels[ (xcurrent  ) * width + (ycurrent-1) ].r > 0){\n\t\t\t\t  ycurrent--;\n  \t\t\t\tdirection = 3;\n\t  \t\t}\n        break; \n  \t\t}//brace closing the case\n\t  \tcase 2:\n\t\t  {//brace opening the case\n\t\t\t  if (pixels[ (xcurrent  ) * width + (ycurrent+1) ].r > 0){\n\t\t\t\t  ycurrent++;\n  \t\t\t\tdirection = 1;\n\t  \t\t} else if (pixels[ (xcurrent+1) * width + (ycurrent  ) ].r > 0){\n\t\t  \t\txcurrent++;\n\t\t\t  \tdirection = 2;\n  \t\t\t} else if (pixels[ (xcurrent  ) * width + (ycurrent-1) ].r > 0){\n\t  \t\t\tycurrent--;\n\t\t  \t\tdirection = 3;\n\t\t\t  } else if (pixels[ (xcurrent-1) * width + (ycurrent  ) ].r > 0){\n\t\t\t\t  xcurrent--;\n  \t\t\t\tdirection = 4;\n\t  \t\t} \n        break;\n  \t\t}//brace closing the case\n\t  \tcase 3:\n\t\t  {//brace opening the case\n\t\t\t  if (pixels[ (xcurrent+1) * width + (ycurrent  ) ].r > 0){\n\t\t\t\t  xcurrent++;\n  \t\t\t\tdirection = 2;\n\t  \t\t} else if (pixels[ (xcurrent  ) * width + (ycurrent-1) ].r > 0){\n\t\t  \t\tycurrent--;\n\t\t\t  \tdirection = 3;\n  \t\t\t} else if(pixels[ (xcurrent-1) * width + (ycurrent  ) ].r > 0){\n\t  \t\t\txcurrent--;\n\t\t  \t\tdirection = 4;\n\t\t\t  } else if (pixels[ (xcurrent  ) * width + (ycurrent+1) ].r > 0){\n\t\t\t\t  ycurrent++;\n  \t\t\t\tdirection = 1;\n\t  \t\t} \n        break;\n  \t\t}//brace closing the case\n\t  \tcase 4:\n\t\t  {//brace opening the case\n\t\t\t  if (pixels[ (xcurrent  ) * width + (ycurrent-1) ].r > 0){\n\t\t\t\t  ycurrent--;\n  \t\t\t\tdirection = 3;\n\t  \t\t} else if (pixels[ (xcurrent-1) * width + (ycurrent  ) ].r > 0){\n\t\t  \t\txcurrent--;\n\t\t\t  \tdirection = 4;\n  \t\t\t} else if (pixels[ (xcurrent  ) * width + (ycurrent+1) ].r > 0){\n\t  \t\t\tycurrent++;\n\t\t  \t\tdirection = 1;\n\t\t\t  } else if (pixels[ (xcurrent+1) * width + (ycurrent  ) ].r > 0){\n\t\t\t\t  xcurrent++;\n  \t\t\t\tdirection = 2;\n\t  \t\t}\n  \t\t}//brace closing the case\n\t  }//brace closing the switch\n      xdata.push(xcurrent);\n      ydata.push(ycurrent);\n      depthdata.push(pixels[ (xcurrent  ) * width + (ycurrent  ) ].r);\n  } //brace closing the while loop\n\n}//brace closing the function\n"
              }
            }
          ],
        "connections" : {
          "pixels" : [
            "findfirstpixel.pixels"
            ],
          "width" : [
            "findfirstpixel.width"
            ],
          "height" : [
            "findfirstpixel.height"
            ],
          "findfirstpixel.xstart" : [
            "findingsecondpixel_2.xstart"
            ],
          "findfirstpixel.ystart" : [
            "findingsecondpixel_2.ystart"
            ],
          "findfirstpixel.pixels" : [
            "findingsecondpixel_2.pixels"
            ],
          "findfirstpixel.width" : [
            "findingsecondpixel_2.width"
            ],
          "findfirstpixel.height" : [
            "findingsecondpixel_2.height"
            ],
          "findingsecondpixel_2.xstart" : [
            "findingremainingedgepixels.xstart"
            ],
          "findingsecondpixel_2.ystart" : [
            "findingremainingedgepixels.ystart"
            ],
          "findingsecondpixel_2.pixels" : [
            "findingremainingedgepixels.pixels"
            ],
          "findingsecondpixel_2.width" : [
            "findingremainingedgepixels.width"
            ],
          "findingsecondpixel_2.height" : [
            "findingremainingedgepixels.height"
            ],
          "findingsecondpixel_2.xfirst" : [
            "findingremainingedgepixels.xfirst"
            ],
          "findingsecondpixel_2.yfirst" : [
            "findingremainingedgepixels.yfirst"
            ],
          "findingsecondpixel_2.directionfirst" : [
            "findingremainingedgepixels.directionfirst"
            ],
          "findingremainingedgepixels.xdata" : [
            "xdata"
            ],
          "findingremainingedgepixels.ydata" : [
            "ydata"
            ],
          "findingremainingedgepixels.depthdata" : [
            "depthdata"
            ]
          }
        },
      "title" : "findingedge"
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\"x\":-73.56576538085938,\"y\":-551.2295532226563}"
        },
      "name" : "FourierSeries2",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "data"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "order"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "sincoefficients"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "coscoefficients"
          }
        ],
      "definition" : {
        "objectType" : "Func",
        "title" : "FourierSeries",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "data",
            "execPortType" : "In",
            "typeSpec" : "$TYPE$[]"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "order",
            "execPortType" : "In",
            "typeSpec" : "UInt32"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "sincoefficients",
            "execPortType" : "Out",
            "typeSpec" : "Float64[]"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "coscoefficients",
            "execPortType" : "Out",
            "typeSpec" : "Float64[]"
            }
          ],
        "extDeps" : {},
        "code" : "dfgEntry {\n  sincoefficients.resize(0);\n  coscoefficients.resize(0);\n  Float64 doublepi = 6.28318530717958648;\n  Float64 multiplier;\n  for (UInt32 j = 0 ; j < order + 1 ; j++){\n      Float64 sinsum = 0;\n      Float64 cossum = 0;\n      multiplier = 1;\n      if (j==0){\n        multiplier = 0.5;\n      }\n      for (UInt32 i = 0 ; i<data.size() ; i++){\n        sinsum = sinsum + ( 2. / data.size() ) * sin( ( doublepi * j * i )/ data.size() ) * data[i] ;\n        cossum = cossum + ( 2. * multiplier / data.size() ) * cos( ( doublepi * j * i )/ data.size() ) * data[i] ;\n      }\n      sincoefficients.push(sinsum);\n      coscoefficients.push(cossum);\n   }\n}\n"
        }
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiGraphPos" : "{\n  \"x\" : 1006.452240467072,\n  \"y\" : -663.5300903320313\n  }"
        },
      "name" : "Report",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "value"
          }
        ],
      "executable" : "Fabric.Core.Func.Report",
      "presetGUID" : "E9448726588111C443C34B2F3D9B0172"
      },
    {
      "objectType" : "Inst",
      "metadata" : {
        "uiComment" : "This function takes the fourier series for the edge of the shape (fx[s], fy[s]), and and calculates if the point (testvalx,testvaly) lies inside the edge. ",
        "uiGraphPos" : "{\"x\":554.3817749023438,\"y\":-723.169921875}",
        "uiCommentExpanded" : "true"
        },
      "name" : "testinsideedge",
      "ports" : [
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "sincoefficients"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "coscoefficients"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "testvalx"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "sincoefficients_2"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "coscoefficients_2"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "In",
          "name" : "testvaly"
          },
        {
          "objectType" : "InstPort",
          "nodePortType" : "Out",
          "name" : "insideoutside"
          }
        ],
      "definition" : {
        "objectType" : "Graph",
        "title" : "",
        "ports" : [
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "sincoefficients",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "coscoefficients",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "testvalx",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "sincoefficients_2",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "coscoefficients_2",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "Out",
            "name" : "testvaly",
            "execPortType" : "In"
            },
          {
            "objectType" : "Port",
            "nodePortType" : "In",
            "name" : "insideoutside",
            "execPortType" : "Out"
            }
          ],
        "extDeps" : {},
        "nodes" : [
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiComment" : "This function finds the region for which the function (given by fourier coefficients) is greater than or equal to testval.  ",
              "uiGraphPos" : "{\"x\":119.2556915283203,\"y\":-823.2971801757813}",
              "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }",
              "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }"
              },
            "name" : "graph",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "sincoefficients"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "coscoefficients"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "testval"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "trueregions"
                }
              ],
            "definition" : {
              "objectType" : "Graph",
              "metadata" : {
                "uiGraphZoom" : "{\n  \"value\" : 0.567566990852356\n  }",
                "uiGraphPan" : "{\n  \"x\" : 456.4925660175422,\n  \"y\" : 435.7069051839611\n  }"
                },
              "title" : "",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "sincoefficients",
                  "execPortType" : "In"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "coscoefficients",
                  "execPortType" : "In"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "testval",
                  "execPortType" : "In"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "trueregions",
                  "execPortType" : "Out"
                  }
                ],
              "extDeps" : {},
              "nodes" : [
                {
                  "objectType" : "Inst",
                  "metadata" : {
                    "uiComment" : "This function uses the position of the turning points to find the value of the turning points. ",
                    "uiGraphPos" : "{\"x\":-75.23581695556641,\"y\":-671.7401123046875}",
                    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }",
                    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }"
                    },
                  "name" : "func",
                  "ports" : [
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "Sincoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "Coscoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "turningpos"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "Out",
                      "name" : "turningval"
                      }
                    ],
                  "definition" : {
                    "objectType" : "Func",
                    "title" : "func",
                    "ports" : [
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "Sincoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "Coscoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "turningpos",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "In",
                        "name" : "turningval",
                        "execPortType" : "Out",
                        "typeSpec" : "Float64[]"
                        }
                      ],
                    "extDeps" : {},
                    "code" : "dfgEntry {\n  turningval.resize(0);\n  Float64 doublepi = 6.2831853071795864769;\n  UInt32 order = Sincoefficients.size();\n  UInt32 len = turningpos.size();\n  Float64 dummyval;\n  for(UInt32 i = 0 ; i < len ; i++ ){\n    dummyval = 0;\n    for(UInt32 j = 0 ; j < order ; j++){\n      dummyval = dummyval + Sincoefficients[j] * sin(doublepi * j * turningpos[i]) + Coscoefficients[j] * cos(doublepi * j * turningpos[i]);\n    }\n    turningval.push(dummyval);\n  }\n}//closes the entire function\n"
                    },
                  "title" : "turningpointval"
                  },
                {
                  "objectType" : "Inst",
                  "metadata" : {
                    "uiComment" : "This function searches for turning points.\nFirst the entire domain of the function is divided into regions of a quarter the wavelength of the highest frequency fourier mode which is considered. If the derivative of the function changes sign in this interval, the interval must contain a turning point.\nIf a region contains a turning point, the region is bisected until there is sufficiently little change in the function over the region. ",
                    "uiGraphPos" : "{\"x\":-378.7933959960938,\"y\":-674.3478393554688}",
                    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }",
                    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }"
                    },
                  "name" : "func_2",
                  "ports" : [
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "Sincoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "Coscoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "Out",
                      "name" : "turningpos"
                      }
                    ],
                  "definition" : {
                    "objectType" : "Func",
                    "title" : "func",
                    "ports" : [
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "Sincoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "Coscoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "In",
                        "name" : "turningpos",
                        "execPortType" : "Out",
                        "typeSpec" : "Float64[]"
                        }
                      ],
                    "extDeps" : {},
                    "code" : "dfgEntry {\n  Float64 doublepi = 6.2831853071795864769;\n  Float64 startingpos = 0;\n  Float64 nextpos = 0;\n  UInt32 len = Sincoefficients.size();\n  turningpos.resize(0);\n  //We add in the end points of the function\n  turningpos.push(0);\n  Float64 dummypos1;\n  Float64 dummypos2;\n  Float64 dummypos3;\n  Float64 deltapos;\n  Float64 deltaval;\n  Float64 test;\n  Float64 test2;\n  Float64 test3;\n  Float64 dummyder1;\n  Float64 dummyder2;\n  Float64 dummyder3;\n  while(nextpos <= 1 - 1. / (4. * len)){// This while loop checks regions of a quarter of the wavelength of the highest frequency sin wave included in the fourier series\n    nextpos = startingpos + 1. / (4. * len);\n    dummyder1 = 0;\n    dummyder2 = 0;\n    for(UInt32 i = 0 ; i < len  ; i++ ){\n      dummyder1 = dummyder1   +   doublepi * i * Sincoefficients[i] * cos(doublepi * i * startingpos)   -  doublepi * i * Coscoefficients[i] * sin(doublepi * i * startingpos);\n      dummyder2 = dummyder2   +   doublepi * i * Sincoefficients[i] * cos(doublepi * i * nextpos    )   -  doublepi * i * Coscoefficients[i] * sin(doublepi * i * nextpos    ); \n    }//brace closing for loop to calculate the dummy derivative values\n    if (dummyder1 * dummyder2 <=0){ //This if statement is true if there is a turning point in the region of interest. named \"if 1\".\n      dummypos1 = startingpos;\n      dummypos2 = nextpos;\n      deltapos = dummypos2-dummypos1;\n      test = abs(dummyder1-dummyder2)* deltapos;\n      UInt32 n=0;\n      // the following while loop will continue so long as the region containing the turning point has a variation of more than 1. \n      // Each itteration will half the size of the region being tested\n      while (test > 0.25 && n<20){\n        n++;\n        dummypos3 = 0.5 * (dummypos1 + dummypos2);\n        dummyder1 = 0;\n        dummyder2 = 0;\n        dummyder3 = 0;\n        for(UInt32 j = 0 ; j < len ; j++ ){\n          dummyder1 = dummyder1   +   doublepi * j * Sincoefficients[j] * cos(doublepi * j * dummypos1)   -  doublepi * j * Coscoefficients[j] * sin(doublepi * j * dummypos1);\n          dummyder2 = dummyder2   +   doublepi * j * Sincoefficients[j] * cos(doublepi * j * dummypos2)   -  doublepi * j * Coscoefficients[j] * sin(doublepi * j * dummypos2);\n          dummyder3 = dummyder2   +   doublepi * j * Sincoefficients[j] * cos(doublepi * j * dummypos3)   -  doublepi * j * Coscoefficients[j] * sin(doublepi * j * dummypos3); \n        }// closes the for loop calculating derivatives\n        // this test will estimate the upper bound on the change in the function based on the derivatives at each end of the function.   \n        test3 = 0.5 * abs(dummyder1-dummyder2) * abs(dummypos1 - dummypos2);\n        // The following if else statements bisects the region, and decides which half the region contains the turning point. \n        // Each itteration will reduce the size of the region by a factor of 2.\n        if(dummyder1 * dummyder3 >= 0){\n          dummypos1 = dummypos3;\n        } else {\n          dummypos2 = dummypos3;\n        }\n        deltaval = 0;\n        for(UInt32 k = 0 ; k < len ; k++ ){\n          deltaval = deltaval + Sincoefficients[k] * (sin(doublepi * k * dummypos1)  - sin(doublepi * k * dummypos2))  +  Coscoefficients[k] * (cos(doublepi * k * dummypos1)  - cos(doublepi * k * dummypos2));\n        }\n        // This test looks at the difference in the value at the two edges of the region containing the turning point\n        test2 = abs(deltaval);\n        // We build the final test as the sum of both the variation at the edges as well as the estimation for the largest variation at the midpoint. \n        test = test2+test3;\n      } // closes the while loop\n      turningpos.push(dummypos3);\n    } //closes the if statment which tests if there is a turning point in a region. Called \"if 1\"\n    startingpos = nextpos;\n  } //closes the while loop which moves along the entire domain searching for turning points\n  // This is the other end point of the function.\n  turningpos.push(1);\n}//closes the entire function\n"
                    },
                  "title" : "turningpointpos"
                  },
                {
                  "objectType" : "Inst",
                  "metadata" : {
                    "uiComment" : "This function searches for regions in which the function crosses f[x] = testval, by comparing testval to the values of each minimum and maximum respectively. \nminmaxfirst tells us if the function starts above or below testval. i.e f[0]>0 implies minmaxfirst = 1",
                    "uiGraphPos" : "{\"x\":199.2888336181641,\"y\":-569.5137939453125}",
                    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }",
                    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }"
                    },
                  "name" : "func_3",
                  "ports" : [
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "turningpointpos"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "turningpointval"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "testval"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "Out",
                      "name" : "testpos"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "Out",
                      "name" : "minmaxfirst"
                      }
                    ],
                  "definition" : {
                    "objectType" : "Func",
                    "title" : "func",
                    "ports" : [
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "turningpointpos",
                        "execPortType" : "In",
                        "typeSpec" : "$TYPE$[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "turningpointval",
                        "execPortType" : "In",
                        "typeSpec" : "$TYPE$[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "testval",
                        "execPortType" : "In",
                        "typeSpec" : "$TYPE$"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "In",
                        "name" : "testpos",
                        "execPortType" : "Out",
                        "typeSpec" : "$TYPE$[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "In",
                        "name" : "minmaxfirst",
                        "execPortType" : "Out",
                        "typeSpec" : "SInt8"
                        }
                      ],
                    "extDeps" : {},
                    "code" : "dfgEntry {\n  UInt32 len = turningpointval.size();\n  Float64 dummy1;\n  Float64 dummy2;\n  testpos.resize(0);\n  if (turningpointval[0] > testval){\n    minmaxfirst = 1;\n  } else{\n    minmaxfirst = -1;\n  }\n  for ( UInt32 i = 0 ; i < len - 1 ; i++){\n    dummy1 = turningpointval[i  ] - testval;\n    dummy2 = turningpointval[i+1] - testval;\n    if (dummy1*dummy2 < 0){\n      testpos.push(turningpointpos[i  ]);\n      testpos.push(turningpointpos[i+1]);\n    }\n  }\n}\n"
                    },
                  "title" : "crossingregions"
                  },
                {
                  "objectType" : "Inst",
                  "metadata" : {
                    "uiComment" : "This function finds the regions where f[x] is greater than testval. \nIt takes the test regions in which a crossing point must lie, and searches for the crossing point by continuously bisecting the regions",
                    "uiGraphPos" : "{\"x\":640.7953491210938,\"y\":-674.7981567382813}",
                    "uiNodeColor" : "{\n  \"r\" : 121,\n  \"g\" : 134,\n  \"b\" : 143\n  }",
                    "uiTextColor" : "{\n  \"r\" : 20,\n  \"g\" : 20,\n  \"b\" : 20\n  }"
                    },
                  "name" : "func_4",
                  "ports" : [
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "sincoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "coscoefficients"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "testval"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "testpos"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "In",
                      "name" : "minmaxfirst"
                      },
                    {
                      "objectType" : "InstPort",
                      "nodePortType" : "Out",
                      "name" : "trueregions"
                      }
                    ],
                  "definition" : {
                    "objectType" : "Func",
                    "title" : "func",
                    "ports" : [
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "sincoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "coscoefficients",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "testval",
                        "execPortType" : "In",
                        "typeSpec" : "UInt32"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "testpos",
                        "execPortType" : "In",
                        "typeSpec" : "Float64[]"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "Out",
                        "name" : "minmaxfirst",
                        "execPortType" : "In",
                        "typeSpec" : "SInt8"
                        },
                      {
                        "objectType" : "Port",
                        "nodePortType" : "In",
                        "name" : "trueregions",
                        "execPortType" : "Out",
                        "typeSpec" : "Float64[]"
                        }
                      ],
                    "extDeps" : {},
                    "code" : "dfgEntry {\n  trueregions.resize(0);\n  Float64 doublepi = 6.2831853071795864769; \n  Float64 dummypos1;\n  Float64 dummypos2;\n  Float64 dummypos3;\n  Float64 dummyval1;\n  Float64 dummyval2;\n  Float64 dummyval3; \n  UInt32 test; \n  UInt32 n = 0; \n  if (minmaxfirst ==1){\n  trueregions.push(0);\n  }\n  for (UInt32 i = 0 ; i < 0.5 * testpos.size() ; i++ ){\n    n = 0;\n    dummypos1 = testpos[(2*i) ];\n    dummypos2 = testpos[(2*i) + 1];\n    test = 2;\n    while(n<50 && test > 1){\n      n++;\n      dummypos3 = 0.5 * (dummypos1 + dummypos2);\n      dummyval1 = 0; \n      dummyval2 = 0;\n      dummyval3 = 0;\n      for(UInt32 j = 0 ; j < sincoefficients.size() ; j++){\n        dummyval1 = dummyval1 + sincoefficients[j] * sin(doublepi * j * dummypos1) + coscoefficients[j] * cos(doublepi * j * dummypos1);\n        dummyval2 = dummyval2 + sincoefficients[j] * sin(doublepi * j * dummypos2) + coscoefficients[j] * cos(doublepi * j * dummypos2);\n        dummyval3 = dummyval3 + sincoefficients[j] * sin(doublepi * j * dummypos3) + coscoefficients[j] * cos(doublepi * j * dummypos3);\n      }\n      dummyval1 = dummyval1 - testval ; \n      dummyval2 = dummyval2 - testval ;\n      dummyval3 = dummyval3 - testval;\n      if (dummyval1 * dummyval3 >= 0){\n        dummypos1 = dummypos3;\n        test = abs(round(dummyval3 - dummyval2));\n      }else{\n        dummypos2 = dummypos3;\n        test = abs(round(dummyval3 - dummyval1));\n      }\n    }//closes the while loop\n    trueregions.push(dummypos3);  \n  }// closes the overall for loop\n  if (minmaxfirst ==1){\n  trueregions.push(1);\n  }\n}\n"
                    },
                  "title" : "truecrossingregions"
                  }
                ],
              "connections" : {
                "sincoefficients" : [
                  "func_2.Sincoefficients"
                  ],
                "coscoefficients" : [
                  "func_2.Coscoefficients"
                  ],
                "testval" : [
                  "func_3.testval"
                  ],
                "func.Sincoefficients" : [
                  "func_4.sincoefficients"
                  ],
                "func.Coscoefficients" : [
                  "func_4.coscoefficients"
                  ],
                "func.turningpos" : [
                  "func_3.turningpointpos"
                  ],
                "func.turningval" : [
                  "func_3.turningpointval"
                  ],
                "func_2.Sincoefficients" : [
                  "func.Sincoefficients"
                  ],
                "func_2.Coscoefficients" : [
                  "func.Coscoefficients"
                  ],
                "func_2.turningpos" : [
                  "func.turningpos"
                  ],
                "func_3.testval" : [
                  "func_4.testval"
                  ],
                "func_3.testpos" : [
                  "func_4.testpos"
                  ],
                "func_3.minmaxfirst" : [
                  "func_4.minmaxfirst"
                  ],
                "func_4.trueregions" : [
                  "trueregions"
                  ]
                }
              },
            "title" : "testingregions"
            },
          {
            "objectType" : "Inst",
            "metadata" : {
              "uiComment" : "This function uses the edges of the region for which fx[s] = testvalx, and comeputes the values fy[s] -testvaly at these same endpoints. If fy[s] - testval has different signs at each end, then fy[s] must have an odd number of intersections, and similarly if positive on both side will have an even number of intersections. \nIf there is a total even number of intersections then the point lies outside of the edge, and insideoutside returns false. \nIf there is a total odd number of intersections, then the point lies inside the edge, and insideoutside returns false. ",
              "uiGraphPos" : "{\"x\":684.77197265625,\"y\":-744.9383544921875}"
              },
            "name" : "func",
            "ports" : [
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "sincoefficients"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "coscoefficients"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "testregions"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "In",
                "name" : "testvalue"
                },
              {
                "objectType" : "InstPort",
                "nodePortType" : "Out",
                "name" : "insideoutside"
                }
              ],
            "definition" : {
              "objectType" : "Func",
              "title" : "func",
              "ports" : [
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "sincoefficients",
                  "execPortType" : "In",
                  "typeSpec" : "Float64[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "coscoefficients",
                  "execPortType" : "In",
                  "typeSpec" : "Float64[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "testregions",
                  "execPortType" : "In",
                  "typeSpec" : "Float64[]"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "Out",
                  "name" : "testvalue",
                  "execPortType" : "In",
                  "typeSpec" : "UInt32"
                  },
                {
                  "objectType" : "Port",
                  "nodePortType" : "In",
                  "name" : "insideoutside",
                  "execPortType" : "Out",
                  "typeSpec" : "Boolean"
                  }
                ],
              "extDeps" : {},
              "code" : "dfgEntry {\n  Float64 doublepi = 6.28318530717958648;\n  Float64 dummy1;\n  UInt32 poscount = 0;\n  UInt32 negcount = 0;\n  for(UInt32 i = 0 ; i < testregions.size() ; i++){\n    dummy1 = 0;\n    for (UInt32 j = 0 ; j < sincoefficients.size() ; j++){\n      dummy1 = dummy1 + sincoefficients[j] * sin(doublepi * j * testregions[i]) + coscoefficients[j] * cos(doublepi * j * testregions[i]);\n    }\n    dummy1 = dummy1 - testvalue;\n    if(dummy1 > 0){\n      poscount++;\n    }\n  }\n  if(poscount%2 ==1){\n    insideoutside = true;\n  } else{\n    insideoutside = false;\n  }\n}\n"
              }
            }
          ],
        "connections" : {
          "sincoefficients" : [
            "graph.sincoefficients"
            ],
          "coscoefficients" : [
            "graph.coscoefficients"
            ],
          "testvalx" : [
            "graph.testval"
            ],
          "sincoefficients_2" : [
            "func.sincoefficients"
            ],
          "coscoefficients_2" : [
            "func.coscoefficients"
            ],
          "testvaly" : [
            "func.testvalue"
            ],
          "graph.trueregions" : [
            "func.testregions"
            ],
          "func.insideoutside" : [
            "insideoutside"
            ]
          }
        },
      "title" : "testinsideedge"
      }
    ],
  "connections" : {
    "filePath" : [
      "LoadImage.filePath"
      ],
    "order" : [
      "FourierSeries_2.order",
      "FourierSeries2.order"
      ],
    "testvalx" : [
      "testinsideedge.testvalx"
      ],
    "testvaly" : [
      "testinsideedge.testvaly"
      ],
    "LoadImage.pixels" : [
      "findingedge.pixels"
      ],
    "LoadImage.width" : [
      "findingedge.width"
      ],
    "LoadImage.height" : [
      "findingedge.height"
      ],
    "FourierSeries_2.sincoefficients" : [
      "testinsideedge.sincoefficients"
      ],
    "FourierSeries_2.coscoefficients" : [
      "testinsideedge.coscoefficients"
      ],
    "findingedge.xdata" : [
      "FourierSeries_2.data"
      ],
    "findingedge.ydata" : [
      "FourierSeries2.data"
      ],
    "FourierSeries2.sincoefficients" : [
      "testinsideedge.sincoefficients_2"
      ],
    "FourierSeries2.coscoefficients" : [
      "testinsideedge.coscoefficients_2"
      ],
    "Report.value" : [
      "value_5"
      ],
    "testinsideedge.insideoutside" : [
      "Report.value"
      ]
    },
  "requiredPresets" : {
    "Fabric.Core.Data.Cache" : {
      "objectType" : "Func",
      "metadata" : {
        "uiNodeColor" : "{\n  \"r\" : 214,\n  \"g\" : 191,\n  \"b\" : 103\n  }",
        "uiAlwaysShowDaisyChainPorts" : "true",
        "uiHeaderColor" : "{\n  \"r\" : 188,\n  \"g\" : 129,\n  \"b\" : 83\n  }"
        },
      "title" : "Cache",
      "cacheRule" : "always",
      "ports" : [
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "name" : "value",
          "execPortType" : "In",
          "typeSpec" : "$TYPE$"
          }
        ],
      "extDeps" : {},
      "presetGUID" : "D903AFD981FE9214C69943F542D5FD60",
      "code" : "dfgEntry {\n}\n"
      },
    "Fabric.Core.Func.Report" : {
      "objectType" : "Func",
      "metadata" : {
        "uiNodeColor" : "{\n  \"r\" : 214,\n  \"g\" : 191,\n  \"b\" : 103\n  }",
        "uiAlwaysShowDaisyChainPorts" : "true",
        "uiHeaderColor" : "{\n  \"r\" : 188,\n  \"g\" : 129,\n  \"b\" : 83\n  }"
        },
      "title" : "Report",
      "ports" : [
        {
          "objectType" : "Port",
          "nodePortType" : "Out",
          "name" : "value",
          "execPortType" : "In",
          "typeSpec" : "$TYPE$"
          }
        ],
      "extDeps" : {},
      "presetGUID" : "E9448726588111C443C34B2F3D9B0172",
      "code" : "\ndfgEntry {\n\treport(value);\n}\n"
      }
    },
  "args" : [
    {
      "type" : "String",
      "value" : "C:\\Users\\Nick\\Documents\\GitHub\\RnD_edgedetect\\Textures_original\\Bunny_Left.tga"
      },
    {
      "type" : "UInt32",
      "value" : 13
      },
    {
      "type" : "UInt32",
      "value" : 85
      },
    {
      "type" : "UInt32",
      "value" : 380
      },
    {
      "type" : "Float64[]",
      "value" : null
      },
    {
      "type" : "Float64[]",
      "value" : null
      },
    {
      "type" : "Float64[]",
      "value" : null
      },
    {
      "type" : "Boolean",
      "value" : null
      }
    ]
  }